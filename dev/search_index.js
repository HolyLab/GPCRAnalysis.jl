var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GPCRAnalysis","category":"page"},{"location":"#GPCRAnalysis","page":"Home","title":"GPCRAnalysis","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GPCRAnalysis.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GPCRAnalysis]","category":"page"},{"location":"#GPCRAnalysis.BWScheme-Tuple{AbstractVector{T} where T, AbstractVector{T} where T}","page":"Home","title":"GPCRAnalysis.BWScheme","text":"BWScheme(conserved_idx, tmspans)\n\nSpecify the Ballesteros-Weinstein scheme used for a particular protein. conserved_idx is a list of 7 \"most conserved\" residues per helix (rhodopsin family: N1, D2, R3, W4, P5, P6, P7) and the span of each helix.\n\nExamples\n\nFor mouse rhodopsin (P15409),\n\njulia> opsd_scheme = BWScheme([55, 83, 135, 161, 215, 267, 303],\n           [34:64, 73:99, 107:139, 150:173, 200:229, 246:277, 285:309]);\n\n\n\n\n\n","category":"method"},{"location":"#GPCRAnalysis.StructAlign-Tuple{AbstractVector{MIToS.PDB.PDBResidue}, AbstractVector{MIToS.PDB.PDBResidue}, AbstractString}","page":"Home","title":"GPCRAnalysis.StructAlign","text":"StructAlign(struct1::AbstractVector{PDBResidue}, struct2::AbstractVector{PDBResidue}, filename::AbstractString)\n\nCreate a structure-based alignment between struct1 and struct2. filename is the name of the TM-align \"results\" file (e.g., https://zhanggroup.org//TM-align/example/873772.html).\n\nSee also residueindex.\n\n\n\n\n\n","category":"method"},{"location":"#GPCRAnalysis.align-Tuple{AbstractMatrix{Float64}, AbstractVector{MIToS.PDB.PDBResidue}, SequenceMapping}","page":"Home","title":"GPCRAnalysis.align","text":"align(fixedpos::AbstractMatrix{Float64}, moving::AbstractVector{PDBResidue}, sm::SequenceMapping)\nalign(fixed::AbstractVector{PDBResidue}, moving::AbstractVector{PDBResidue}, sm::SequenceMapping)\n\nReturn a rotated and shifted version of moving so that the α-carbons of residues moving[sm] have least mean square error deviation from positions fixedpos or those of residues fixed.\n\n\n\n\n\n","category":"method"},{"location":"#GPCRAnalysis.chargelocations-Tuple{AbstractVector{MIToS.PDB.PDBResidue}}","page":"Home","title":"GPCRAnalysis.chargelocations","text":"chargelocations(pdb::AbstractVector{PDBResidue}; include_his::Bool=false)\n\nReturn a list of potential charge locations in the protein structure. Each is a tuple (position, residueindex, AAname). The positions are those of N (in positively-charged residues like Arg & Lys) or O (in negatively-charged residues like Asp and Glu). N- and C-termini are not included in the list. While each residue will carry a net total charge of ±1, the location of each potential charge will be listed (1 for Lys, 2 each for Arg, Asp, and Glu).\n\nBy default, histidine is not considered charged, but you can include it by setting include_His=true.\n\n\n\n\n\n","category":"method"},{"location":"#GPCRAnalysis.chimerax_script-Tuple{Any, Any, MIToS.MSA.AnnotatedMultipleSequenceAlignment, Any}","page":"Home","title":"GPCRAnalysis.chimerax_script","text":"chimerax_script(filename, uprot_list, msa::AnnotatedMultipleSequenceAlignment, colidxs;\n                dir=pwd(), chain_transparency=80, styles=Dict{Int,String}(), extras=String[])\n\nCreate a chimerax visualization script with name filename. uprot_list is a list of UniProtX names that you want to visualize.  The AlphaFold PDB files for these proteins should be dir. msa is a Multiple Sequence alignment and colidxs specifies the column indices in msa that you'd like to visualize.\n\nchain_transparency sets the transparency on the ribbon diagrams (0 = not transparent). styles can be used to affect the display, e.g., Dict(k => \"@SD sphere\") would cause methionines at column index k to be displayed with the sulfur in sphere mode. extras can be used to hand-specify a number of additional commands; this can be useful if, for example, the msa has occasional misalignments.\n\nExamples\n\nSuppose you have the msa for rhodopsin (mouse: P15409), then:\n\nchimerax_script(\"myscript.cxc\", [\"P15409\"], msa, [i1, i2, i3])\n\nwhere i1 through i3 are column-indices in the msa that you'd like to view.\n\n\n\n\n\n","category":"method"},{"location":"#GPCRAnalysis.columnwise_entropy","page":"Home","title":"GPCRAnalysis.columnwise_entropy","text":"columnwise_entropy(msa::AbstractMultipleSequenceAlignment, aacode = ReducedAlphabet(\"(AILMV)(NQST)(RHK)(DE)(FWY)CGP\")\n\nCompute the entropy of each column in an MSA. Low entropy indicates high conservation.\n\nUnmatched entries ('-' residues) contribute to the entropy calculation as if they were an ordinary residue.\n\n\n\n\n\n","category":"function"},{"location":"#GPCRAnalysis.download_alphafolds-Tuple{MIToS.MSA.AbstractMultipleSequenceAlignment}","page":"Home","title":"GPCRAnalysis.download_alphafolds","text":"download_alphafolds(msa::AbstractMultipleSequenceAlignment; dirname=pwd())\n\nDownload all available AlphaFold structures for the sequences in msa. Missing entries are silently skipped.\n\n\n\n\n\n","category":"method"},{"location":"#GPCRAnalysis.filter_long!-Tuple{MIToS.MSA.AbstractMultipleSequenceAlignment, Real}","page":"Home","title":"GPCRAnalysis.filter_long!","text":"filter_long!(msa::AbstractMultipleSequenceAlignment, minres::Real)\n\nRemove all sequences from msa with fewer than minres matching residues.\n\n\n\n\n\n","category":"method"},{"location":"#GPCRAnalysis.filter_species!-Tuple{MIToS.MSA.AbstractMultipleSequenceAlignment, AbstractString}","page":"Home","title":"GPCRAnalysis.filter_species!","text":"filter_species!(msa::AbstractMultipleSequenceAlignment, speciesname::AbstractString)\n\nRemove all sequences from msa except those with species(sequencename) equal to speciesname.\n\n\n\n\n\n","category":"method"},{"location":"#GPCRAnalysis.getchain-Tuple{AbstractString}","page":"Home","title":"GPCRAnalysis.getchain","text":"getchain(filename::AbstractString; model=\"1\", chain=\"A\")\n\nRead a PDB file filename and extract the specified chain.\n\n\n\n\n\n","category":"method"},{"location":"#GPCRAnalysis.lookupbw-Tuple{Integer, BWScheme}","page":"Home","title":"GPCRAnalysis.lookupbw","text":"helix, residue_position = lookupbw(idx::Integer, scheme::BWScheme)\n\nCalculate the Ballesteros-Weinstein residue number coresponding to residue idx. tmspans describes the transmembrane regions in the reference, and bwconserved the index of the most-conserved residue.\n\nExamples\n\nFor mouse rhodopsin (P15409),\n\njulia> opsd_scheme = BWScheme([55, 83, 135, 161, 215, 267, 303],\n           [34:64, 73:99, 107:139, 150:173, 200:229, 246:277, 285:309]);\n\njulia> lookupbw(160, opsd_scheme)\n(4, 49)\n\njulia> lookupbw((4, 49), opsd_scheme)\n160\n\nThis is the residue just before the most-conserved residue of helix 4.\n\n\n\n\n\n","category":"method"},{"location":"#GPCRAnalysis.project_sequences-Tuple{MIToS.MSA.AbstractMultipleSequenceAlignment}","page":"Home","title":"GPCRAnalysis.project_sequences","text":"X = project_sequences(msa::AbstractMultipleSequenceAlignment; fracvar::Real = 0.9)\n\nPerform a classical multidimensional scaling analysis to project the sequences in msa to a space in which pairwise distances approximately reproduce 100 - percentsimilarity(seq1, seq2). The dimensionality is chosen to reconstruction fracvar of the variance.\n\n\n\n\n\n","category":"method"},{"location":"#GPCRAnalysis.residue_centroid-Tuple{MIToS.PDB.PDBResidue}","page":"Home","title":"GPCRAnalysis.residue_centroid","text":"residue_centroid(r::PDBResidue)\n\nCompute the mean position of all atoms in r excluding hydrogen.\n\nResidue centers may yield a more reliable measure of \"comparable residues\" than the α-carbons (see CAmatrix) because they incorporate the orientation of the side chain relative to the overall fold.\n\nSee also residue_centroid_matrix.\n\n\n\n\n\n","category":"method"},{"location":"#GPCRAnalysis.residue_centroid_matrix-Tuple{Any}","page":"Home","title":"GPCRAnalysis.residue_centroid_matrix","text":"residue_centroid_matrix(seq)\n\nReturn a matrix of all residue centroids as columns. See also residue_centroid.\n\n\n\n\n\n","category":"method"},{"location":"#GPCRAnalysis.residueindex-Tuple{StructAlign, Integer, Nothing}","page":"Home","title":"GPCRAnalysis.residueindex","text":"residueindex(sa::StructAlign, idx1, nothing)\nresidueindex(sa::StructAlign, idx1, nothing, ±1)\n\nCalculate the residue index in structure 2 corresponding to residue idx1 in structure 1. The second form allows you to find the nearest corresponding residue in the forward (+1) or reverse (-1) directions, if idx1 is not among the mapped residues.\n\n\n\n\n\n","category":"method"},{"location":"#GPCRAnalysis.residueindex-Tuple{StructAlign, Nothing, Integer}","page":"Home","title":"GPCRAnalysis.residueindex","text":"residueindex(sa::StructAlign, nothing, idx2)\nresidueindex(sa::StructAlign, nothing, idx2, ±1)\n\nCalculate the residue index in structure 1 corresponding to residue idx2 in structure 2. The second form allows you to find the nearest corresponding residue in the forward (+1) or reverse (-1) directions, if idx2 is not among the mapped residues.\n\n\n\n\n\n","category":"method"},{"location":"#GPCRAnalysis.sortperm_msa-Tuple{MIToS.MSA.AbstractMultipleSequenceAlignment}","page":"Home","title":"GPCRAnalysis.sortperm_msa","text":"tour = sortperm_msa(msa::AbstractMultipleSequenceAlignment)\n\nOrder the sequences in msa to minimize the \"tour length\" visiting each sequence once. The length between sequences is defined at 100 - percentsimilarity(seq1, seq2).\n\nThis can be useful for graphical or alignment display by grouping obviously-similar sequences near one another.\n\n\n\n\n\n","category":"method"},{"location":"#GPCRAnalysis.species-Tuple{AbstractString}","page":"Home","title":"GPCRAnalysis.species","text":"species(name)\n\nExtract the species identifier from a UniProt \"X_Y\" entry or elaborated variant (e.g., PFAM sequence name).\n\nSee also uniprotX.\n\nExamples\n\njulia> species(\"Q8VGW6_MOUSE/31-308\")\n\"MOUSE\"\n\n\n\n\n\n","category":"method"},{"location":"#GPCRAnalysis.try_download_alphafold","page":"Home","title":"GPCRAnalysis.try_download_alphafold","text":"try_download_alphafold(uniprotXname, path=alphafoldfile(uniprotXname))\n\nAttempt to download an AlphaFold structure. Returns nothing if no entry corresponding to uniprotXname exists; otherwise it return path, the pathname of the saved file.\n\n\n\n\n\n","category":"function"},{"location":"#GPCRAnalysis.uniprotX-Tuple{AbstractString}","page":"Home","title":"GPCRAnalysis.uniprotX","text":"uniprotX(name)\n\nExtract the UniProt \"X\" entry from an X_Y entry or elaborated variant (e.g., PFAM sequence name).\n\nSee also species.\n\nExamples\n\njulia> uniprotX(\"Q8VGW6_MOUSE/31-308\")\n\"Q8VGW6\"\n\n\n\n\n\n","category":"method"}]
}
